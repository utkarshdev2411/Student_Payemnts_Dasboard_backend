Backend API Documentation: School Payment Microservice

Version: 1.0.0

===============================================================================

1. OVERVIEW

This document provides detailed information for backend developers working on 
the School Payment and Dashboard microservice. The primary objective of this 
service is to manage payment orders, process transactions by integrating with 
a third-party payment gateway, handle status updates via webhooks, and provide 
endpoints to query transaction data.

===============================================================================

2. TECHNOLOGY STACK

* Runtime: Node.js
* Framework: Express.js
* Database: MongoDB with Mongoose ODM
* Authentication: JSON Web Tokens (JWT)
* Environment Management: dotenv
* Validation: express-validator (or similar)

===============================================================================

3. PROJECT SETUP

Follow these steps to set up the development environment locally.

1. Clone the Repository
   git clone <repository-url>
   cd school-payment-app/backend

2. Install Dependencies
   npm install

3. Configure Environment Variables
   - Create a .env file in the /backend root directory.
   - Copy the contents from .env.example (or the section below) into the .env 
     file and fill in the required values, especially your MongoDB Atlas 
     connection string.

4. Run the Development Server
   npm run dev
   
   The server will start on the port specified in your .env file 
   (e.g., http://localhost:8000).

===============================================================================

4. ENVIRONMENT VARIABLES

The following variables must be defined in the .env file for the application 
to run correctly.

Variable       | Description                                              | Example Value
---------------|----------------------------------------------------------|------------------
PORT           | The port on which the Express server will run.          | 8000
MONGO_URI      | Connection string for your MongoDB Atlas cluster.       | mongodb+srv://user:pass@cluster.mongodb.net/school-db
JWT_SECRET     | A secret key for signing and verifying JWTs.            | a_very_long_and_random_secret_string
JWT_EXPIRY     | The expiration time for JWTs.                           | 1d
PG_KEY         | The key provided for the payment gateway.               | edvtest01
PG_API_KEY     | The JWT API key for authenticating with the payment gateway. | eyJhbGciOi...
SCHOOL_ID      | The default/test school ID for creating payments.       | 65b0e6293e9f76a9694d84b4

===============================================================================

5. DATABASE SCHEMAS

All schemas are defined in the /models directory.

5.1 userModel.js
Stores user credentials for accessing protected APIs.

Field      | Type   | Constraints                | Description
-----------|--------|----------------------------|-----------------------------
username   | String | required, unique           | User's login name.
password   | String | required, minlength: 6     | Hashed password of the user.

5.2 orderModel.js
Stores the initial order information before a payment is attempted.

Field          | Type     | Constraints      | Description
---------------|----------|------------------|----------------------------------------
_id            | ObjectId | auto-generated   | Unique identifier for the order. This is used as collect_id.
school_id      | String   | required         | ID of the school initiating the order.
trustee_id     | String   |                  | ID of the trustee, if applicable.
student_info   | Object   | required         | Object containing student details (name, id, email).
gateway_name   | String   |                  | Name of the payment gateway used.

5.3 orderStatusModel.js
Stores the detailed status and result of a payment transaction.

Field              | Type     | Constraints           | Description
-------------------|----------|-----------------------|----------------------------------------
collect_id         | ObjectId | required, ref: 'Order'| Reference to the corresponding Order document.
order_amount       | Number   | required              | The original amount for the order.
transaction_amount | Number   |                       | The actual amount paid (might include fees).
payment_mode       | String   |                       | e.g., 'upi', 'card', 'netbanking'.
payment_details    | String   |                       | e.g., UPI ID, last 4 digits of card.
bank_reference     | String   |                       | Bank's unique reference for the transaction.
payment_message    | String   |                       | A message from the gateway (e.g., 'payment success').
status             | String   | required              | Transaction status (e.g., 'pending', 'success', 'failed').
error_message      | String   |                       | Gateway error message, if any.
payment_time       | Date     |                       | Timestamp of the successful payment.

5.4 webhookLogModel.js
Stores raw logs of all incoming webhooks for auditing and debugging.

Field         | Type   | Constraints    | Description
--------------|--------|----------------|----------------------------------------
received_at   | Date   | default: Now   | Timestamp when the webhook was received. 
payload       | Object | required       | The full, raw JSON payload from the webhook.
status        | String | required       | 'processed' or 'failed' based on handling.

===============================================================================

6. API ENDPOINTS

6.1 Authentication

POST /api/auth/login
Authenticates a user and returns a JWT.

* Protection: None
* Request Body:
  {
    "username": "admin",
    "password": "password123"
  }

* Success Response (200 OK):
  {
    "token": "eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9..."
  }

* Error Response (401 Unauthorized):
  {
    "message": "Invalid credentials"
  }

6.2 Payment Integration

POST /api/payments/create-payment
Creates an order and initiates a payment transaction with the gateway.

* Protection: JWT Required
* Request Body:
  {
    "order_amount": 2000,
    "student_info": {
      "name": "John Doe",
      "id": "STU12345",
      "email": "john.doe@example.com"
    }
  }

* Success Response (200 OK):
  Returns the URL for the user to be redirected to for completing the payment.
  {
    "payment_url": "https://payment.gateway.com/pay/xyz123"
  }

* Error Response (400 Bad Request):
  {
    "message": "Validation failed: order_amount is required"
  }

6.3 Webhook Handling

POST /api/webhook
An endpoint for the payment gateway to send transaction status updates.

* Protection: None (Publicly accessible, relies on payload integrity)
* Request Body:
  {
    "status": 200,
    "order_info": {
      "order_id": "60c72b2f9b1d8c001f8e4c6a", // This is the collect_id
      "order_amount": 2000,
      "transaction_amount": 2000,
      "gateway": "PhonePe",
      "bank_reference": "YESBNK222",
      "status": "success",
      "payment_mode": "upi",
      "payemnt_details": "success@ybl",
      "Payment_message": "payment success",
      "payment_time": "2025-04-23T08:14:21.945Z",
      "error_message": "NA"
    }
  }

* Success Response (200 OK): An empty body with status 200 acknowledges receipt.
* Error Response (404 Not Found):
  {
    "message": "Order with collect_id 60c72b2... not found"
  }

6.4 Transaction Data

GET /api/transactions
Fetches a paginated and sorted list of all transactions, joining Order and OrderStatus data.

* Protection: JWT Required
* Query Parameters:
  - page (Number, default: 1): The page number for pagination.
  - limit (Number, default: 10): The number of items per page.
  - sortBy (String, default: payment_time): Field to sort by.
  - order (String, default: desc): Sort order (asc or desc).

* Success Response (200 OK):
  {
    "data": [
      {
        "collect_id": "60c72b2f9b1d8c001f8e4c6a",
        "school_id": "65b0e6293e9f76a9694d84b4",
        "gateway": "PhonePe",
        "order_amount": 2000,
        "transaction_amount": 2000,
        "status": "success"
      }
    ],
    "pagination": {
      "currentPage": 1,
      "totalPages": 5,
      "totalItems": 50
    }
  }

GET /api/transactions/school/:schoolId
Fetches all transactions for a specific school.

* Protection: JWT Required
* URL Parameters:
  - schoolId (String, required): The ID of the school.
* Query Parameters: Same as /api/transactions for pagination and sorting.
* Success Response (200 OK): Same structure as /api/transactions.

GET /api/transaction-status/:collectId
Checks the current status of a single transaction.

* Protection: JWT Required
* URL Parameters:
  - collectId (String, required): The _id of the order.

* Success Response (200 OK):
  {
    "collect_id": "60c72b2f9b1d8c001f8e4c6a",
    "status": "success"
  }

* Error Response (404 Not Found):
  {
    "message": "Transaction not found"
  }

===============================================================================

7. GENERAL ERROR HANDLING

Errors will be returned in a consistent JSON format.

{
  "message": "A human-readable error description.",
  "errors": [ /* Optional array of validation errors */ ]
}