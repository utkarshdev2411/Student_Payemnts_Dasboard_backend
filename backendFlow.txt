Excellent idea. Consolidating everything into a single, updated, and structured document is the perfect next step.

Here is the new, comprehensive backend documentation. It incorporates the missing points we discussed, adds more detail based on your project files and requirements, and includes a progress tracker at the end to show the current status of your codebase.

You can save this content as `COMPREHENSIVE_BACKEND_DOCS.md` in your project root.

```markdown
# Comprehensive Backend API Documentation v2.0
## School Payment Microservice

**Version:** 2.0.0
**Last Updated:** 2025-09-17

---

### 1. Overview
This document provides a complete guide for backend developers. Its purpose is to detail the architecture, endpoints, and logic for the School Payment and Dashboard microservice. The service handles payment creation, transaction processing via a third-party gateway, status updates via webhooks, and data retrieval for the dashboard.

---

### 2. Technology Stack & Project Structure

* **Runtime**: Node.js
* **Framework**: Express.js
* **Database**: MongoDB with Mongoose ODM
* **Authentication**: JSON Web Tokens (JWT)
* **Validation**: `express-validator`
* **Key Dependencies**: `bcryptjs`, `cors`, `dotenv`

**Folder Structure:**
```

/backend
|-- /config          \# DB connection (database.js), JWT helpers (jwt.js)
|-- /controllers     \# Request handling logic for each route
|-- /middleware      \# Authentication (auth.js), error handling
|-- /models          \# Mongoose schemas (userModel.js, orderModel.js, etc.)
|-- /routes          \# API route definitions
|-- .env             \# Environment variables (from .env.example)
|-- server.js        \# Main server entry point
\`-- package.json

````

---

### 3. Environment Variables
These variables must be defined in a `.env` file. A template is available in `.env.example`.

| Variable | Description | Example Value |
| :--- | :--- | :--- |
| `PORT` | The port for the Express server. | `8000` |
| `MONGO_URI` | Connection string for MongoDB Atlas. | `mongodb+srv://user:pass@...` |
| `JWT_SECRET` | Secret key for signing internal API JWTs. | `a_very_long_and_random_secret` |
| `JWT_EXPIRY` | Expiration time for internal API JWTs. | `1d` |
| `PG_KEY` | Secret Key for signing JWTs sent to the payment gateway. | `edvtest01` |
| `PG_API_KEY` | Bearer Token for authenticating with the payment gateway. | `eyJhbGciOi...` |
| `SCHOOL_ID` | The default school ID for creating payments. | `65b0e6293e9f76a9694d84b4` |

---

### 4. Database Schemas
Defined in the `/models` directory. All models include `timestamps: true`.

* **`userModel.js`**: Stores user credentials. Passwords are automatically hashed pre-save using `bcryptjs`.
* **`orderModel.js`**: Stores initial order details. Indexed on `school_id` and `student_info.id` for performance.
* **`orderStatusModel.js`**: Stores the result of a transaction. Indexed on `collect_id`, `status`, and `payment_time`.
* **`webhookLogModel.js`**: Logs all incoming webhook payloads for auditing.

---

### 5. API Endpoints

#### 5.1 Authentication

**`POST /api/auth/register`**
* **Description**: Creates a new user.
* **Protection**: None
* **Request Body**:
    ```json
    { "username": "newuser", "password": "password123" }
    ```
* **Success Response (201 Created)**:
    ```json
    { "userId": "...", "username": "newuser" }
    ```

**`POST /api/auth/login`**
* **Description**: Authenticates a user and returns a JWT for accessing protected routes.
* **Protection**: None
* **Request Body**:
    ```json
    { "username": "admin", "password": "password123" }
    ```
* **Success Response (200 OK)**:
    ```json
    { "token": "eyJhbGciOi..." }
    ```

#### 5.2 Payment Gateway

**`POST /api/payments/create-payment`**
* **Description**: Creates a local order record and calls the external payment gateway to get a payment link.
* **Protection**: JWT Required
* **Request Body**:
    ```json
    {
      "order_amount": "2000",
      "callback_url": "[https://your-frontend-domain.com/payment-status](https://your-frontend-domain.com/payment-status)",
      "student_info": { "name": "John Doe", "id": "STU123", "email": "john.doe@example.com" }
    }
    ```
* **Success Response (200 OK)**:
    ```json
    { "payment_url": "[https://payment.gateway.com/pay/xyz123](https://payment.gateway.com/pay/xyz123)" }
    ```

#### 5.3 Webhooks

**`POST /api/webhook`**
* **Description**: Public endpoint for the payment gateway to send transaction status updates.
* **Protection**: None
* **Success Response**: An empty body with status `200 OK` acknowledges receipt.

#### 5.4 Transaction Data Retrieval

**`GET /api/transactions`**
* **Description**: Fetches a paginated list of all transactions by joining `Order` and `OrderStatus` data.
* **Protection**: JWT Required
* **Query Parameters**:
    * `page` (Number, default: 1)
    * `limit` (Number, default: 10)
    * `sortBy` (String, default: `payment_time`)
    * `order` (String, `asc` or `desc`, default: `desc`)
    * `status` (String, e.g., 'success', 'pending')
    * `schoolId` (String)
    * `startDate` (String, ISO Date format)
    * `endDate` (String, ISO Date format)

**`GET /api/transactions/school/:schoolId`**
* **Description**: Fetches all transactions for a specific school.
* **Protection**: JWT Required
* **Query Parameters**: Supports the same pagination and sorting as `/api/transactions`.

**`GET /api/transaction-status/:collectId`**
* **Description**: Checks the status of a specific transaction by first calling the external payment gateway API, then returning the status from our DB.
* **Protection**: JWT Required

---

### 6. Core Logic Flows

#### 6.1 Payment Creation Flow (`/create-payment`)
1.  Receive `order_amount`, `student_info`, and `callback_url` from the client.
2.  Create a new `Order` document in MongoDB. The `_id` becomes our internal `collect_id`.
3.  Create an initial `OrderStatus` document linked to the `collect_id` with `status: 'pending'`.
4.  Generate a `sign` JWT with the payload `{ school_id, amount, callback_url }` signed using the `PG_KEY` secret.
5.  Make a `POST` request to `https://dev-vanilla.edviron.com/erp/create-collect-request`.
    * **Headers**: `Authorization: Bearer <PG_API_KEY>`
    * **Body**: `{ school_id, amount, callback_url, sign }`
6.  Extract `Collect_request_url` from the gateway's response and send it back to the client.

#### 6.2 Transaction Status Check Flow (`/transaction-status/:collectId`)
1.  Receive `collectId` from the client's request parameters.
2.  Generate a `sign` JWT with the payload `{ school_id, collect_request_id }` signed with the `PG_KEY` secret.
3.  Make a `GET` request to the external gateway: `https://dev-vanilla.edviron.com/erp/collect-request/{collectId}?school_id={schoolId}&sign={sign}`.
4.  (Optional but recommended) Update the local `OrderStatus` with the latest status from the gateway.
5.  Retrieve the `OrderStatus` from the local database and return it to the client.

---

### 7. Current Progress & Task Tracker

This tracker reflects the current state of the backend codebase based on the provided files.

* `[x]` **Module 1: Project Foundation & Setup**
    * `[x]` Initialize Node.js project and install dependencies.
    * `[x]` Set up Express server in `server.js`.
    * `[x]` Configure database connection (`config/database.js`).
    * `[x]` Set up environment variables (`.env.example`).

* `[x]` **Module 2: Database Modeling**
    * `[x]` Create User schema (`models/userModel.js`).
    * `[x]` Create Order schema (`models/orderModel.js`).
    * `[x]` Create OrderStatus schema (`models/orderStatusModel.js`).
    * `[x]` Create WebhookLog schema (`models/webhookLogModel.js`).

* `[]` **Module 3: Routes & Controllers Implementation**
    * `[x]` Create authentication middleware (`middleware/auth.js`).
    * `[]` Create route files for auth, payments, transactions, and webhooks.
    * `[]` Implement controller logic for user registration and login.
    * `[]` Implement controller logic for the payment creation flow.
    * `[]` Implement controller logic for the webhook handler.
    * `[]` Implement controller logic for all transaction data endpoints (with aggregation, pagination, etc.).

* `[]` **Module 4: Finalization**
    * `[]` Implement comprehensive error handling and data validation on all routes.
    * `[]` Create a Postman collection for API testing.
    * `[]` Write unit/integration tests.
    * `[]` Prepare for deployment (hosting setup, final README).

````